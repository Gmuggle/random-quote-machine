{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quoteText","quoteAuthor","color","paraColor","Quote","id","className","this","props","index","colorIndex","randomIndex","href","target","aria-hidden","onClick","handleChange","React","Component","App","state","newQuote","bind","setState","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAIMA,G,MAAY,CAChB,6FACA,gHACA,sJACA,yDACA,mEACA,8KACA,4HACA,oDAGIC,EAAc,CAClB,aACA,UACA,gBACA,uBACA,uBACA,cACA,mBACA,wBAGIC,EAAQ,CAAC,MAAO,MAAO,SACvBC,EAAY,CAAC,WAAY,WAAY,cAErCC,E,iLAOA,OACI,6BACE,uBAAGC,GAAG,OAAOC,UAAW,mCAAqCH,EAAUI,KAAKC,MAAMC,MAAMC,aAAxF,IAAuGV,EAAUO,KAAKC,MAAMC,MAAME,cAClI,uBAAGN,GAAG,SAASC,UAAW,kCAAoCH,EAAUI,KAAKC,MAAMC,MAAMC,aAAzF,KAAyGT,EAAYM,KAAKC,MAAMC,MAAME,cAEtI,uBAAGN,GAAG,QAAQC,UAAW,sBAAwBJ,EAAMK,KAAKC,MAAMC,MAAMC,YAAc,gBAAgB,uBAAGL,GAAG,cAAcO,KAAK,4BAA4BC,OAAO,UAAS,uBAAGP,UAAU,gBAAgBQ,cAAY,SAA9G,aAEtG,uBAAGT,GAAG,SAASC,UAAU,sCAAqC,4BAAQD,GAAG,YAAYC,UAAWJ,EAAMK,KAAKC,MAAMC,MAAMC,YAAcK,QAASR,KAAKC,MAAMQ,cAA3F,mB,GAdtDC,IAAMC,WAiDXC,E,YA3Bb,WAAYX,GAAO,IAAD,8BACd,4CAAMA,KACDY,MAAQ,CACTT,YAAa,EACbD,WAAY,GAEhB,EAAKW,SAAW,EAAKA,SAASC,KAAd,gBANF,E,wEAUdf,KAAKgB,SAAS,CACVZ,YAAaa,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7BhB,WAAYc,KAAKC,MAAsB,EAAhBD,KAAKE,c,+BAKhC,OACI,yBAAKrB,GAAG,gBAAgBC,UAAW,OAASJ,EAAMK,KAAKa,MAAMV,aACzD,yBAAKL,GAAG,YAAYC,UAAU,+CAC1B,kBAAC,EAAD,CAAOG,MAAOF,KAAKa,MAAOJ,aAAcT,KAAKc,iB,GArB7CJ,IAAMC,WCtCJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.855a61f2.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nconst quoteText = [\n  \"You take your life in your own hands, and what happens? A terrible thing, no one to blame.\",\n  \"You can’t fall if you don’t climb. But there’s no joy in living your whole life on the ground.\",\n  \"If you look at what you have in life, you’ll always have more. If you look at what you don’t have in life, you’ll never have enough.\",\n  \"If you want to lift yourself up, lift up someone else.\",\n  \"I attribute my success to this: I never gave or took any excuse.\",\n  \"The battles that count aren’t the ones for gold medals. The struggles within yourself–the invisible battles inside all of us–that’s where it’s at.\",\n  \"If you hear a voice within you say “you cannot paint,” then by all means paint and that voice will be silenced.\",\n  \"Change your thoughts and you change your world.\"\n];\n\nconst quoteAuthor = [\n  \"Erica Jong\",\n  \"Unknown\",\n  \"Oprah Winfrey\",\n  \"Booker T. Washington\",\n  \"Florence Nightingale\",\n  \"Jesse Owens\",\n  \"Vincent Van Gogh\",\n  \"Norman Vincent Peale\"\n];\n\nconst color = [\"one\", \"two\", \"three\"];\nconst paraColor = [\"text-one\", \"text-two\", \"text-three\"];\n\nclass Quote extends React.Component {\n/*   constructor(props) {\n      super(props);\n  } */\n\n  render() {\n      \n      return (\n          <div>\n            <p id=\"text\" className={\"text-center col-xs-12 col-md-12 \" + paraColor[this.props.index.colorIndex]}>\"{quoteText[this.props.index.randomIndex]}</p>\n            <p id=\"author\" className={\"text-right col-xs-12 col-md-12 \" + paraColor[this.props.index.colorIndex]}>--{quoteAuthor[this.props.index.randomIndex]}</p>\n\n            <p id=\"tweet\" className={\"col-xs-12 col-md-2 \" + color[this.props.index.colorIndex] + \" text-center\"}><a id=\"tweet-quote\" href=\"#twitter.com/intent/tweet\" target=\"_blank\"><i className=\"fa fa-twitter\" aria-hidden=\"true\"></i>tweet it</a></p>\n\n            <p id=\"button\" className=\"col-xs-12 col-md-3 col-md-offset-7\"><button id=\"new-quote\" className={color[this.props.index.colorIndex]}  onClick={this.props.handleChange}>New quote</button></p>\n\n          </div>\n      );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n      super(props);\n      this.state = {\n          randomIndex: 0,\n          colorIndex: 0\n      };\n      this.newQuote = this.newQuote.bind(this);\n  }\n\n  newQuote() {\n      this.setState({\n          randomIndex: Math.floor(Math.random() * 8),\n          colorIndex: Math.floor(Math.random() * 3)\n      });\n  }\n\n  render() {\n      return (\n          <div id=\"app-container\" className={\"row \" + color[this.state.colorIndex]}>\n              <div id=\"quote-box\" className=\"col-xs-9 col-md-6 col-md-offset-3 row well \">\n                  <Quote index={this.state} handleChange={this.newQuote}/>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}